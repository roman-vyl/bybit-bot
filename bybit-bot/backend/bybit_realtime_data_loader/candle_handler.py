"""
–ú–æ–¥—É–ª—å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–≤–µ—á–µ–π –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö (—Ç–∞–±–ª–∏—Ü—ã candles_<interval> —á–µ—Ä–µ–∑ sqlite), —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º –ø–æ symbol+timestamp.
–£—á–∞—Å—Ç–≤—É–µ—Ç –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ—Å—Ç—É–ø–∞—é—â–∏—Ö real-time —Å–≤–µ—á–µ–π.
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç: sqlite, –¥–∞–Ω–Ω—ã–µ —Å–≤–µ—á–µ–π. –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç: —Ñ—É–Ω–∫—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–≤–µ—á–µ–π –≤ –ë–î.
"""

import sqlite3
import logging
from typing import Dict
from backend.config.timeframes_config import TIMEFRAMES_CONFIG
from backend.core.dim.ezdim import EzDIM


logger = logging.getLogger(__name__)
DB_PATH = "db/market_data.sqlite"


class CandleHandler:
    def __init__(self, db_path: str = DB_PATH):
        self.db_path = db_path

    def handle_candle(self, data: Dict):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω—É—é —Å–≤–µ—á—É –æ—Ç Bybit:
        —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –≤ —Ç–∞–±–ª–∏—Ü–µ candles_<timeframe>
        """
        try:
            symbol = data["symbol"]
            interval = data["interval"]
            timestamp = int(
                data["start"] // 1000
            )  # start of candle, –ø—Ä–∏–≤–æ–¥–∏–º –∫ —Å–µ–∫—É–Ω–¥–∞–º
            table = f"candles_{interval}"

            if interval not in TIMEFRAMES_CONFIG:
                logger.warning(f"‚è≠ –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª: {interval}")
                return

            # –°–æ–∑–¥–∞–µ–º DataFrame –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
            import pandas as pd

            df = pd.DataFrame(
                [
                    {
                        "timestamp": timestamp,
                        "open": float(data["open"]),
                        "high": float(data["high"]),
                        "low": float(data["low"]),
                        "close": float(data["close"]),
                        "volume": float(data["volume"]),
                    }
                ]
            )

            # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
            EzDIM.preflight(
                df,
                required_cols=["timestamp", "open", "high", "low", "close"],
                min_rows=1,
                tf_sec=TIMEFRAMES_CONFIG[interval]["interval_sec"],
            )

            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()

                query = f"""
                INSERT INTO {table} (symbol, timestamp, open, high, low, close, volume)
                VALUES (?, ?, ?, ?, ?, ?, ?)
                ON CONFLICT(symbol, timestamp) DO UPDATE SET
                    open=excluded.open,
                    high=excluded.high,
                    low=excluded.low,
                    close=excluded.close,
                    volume=excluded.volume
                """

                cursor.execute(
                    query,
                    (
                        symbol,
                        timestamp,
                        float(data["open"]),
                        float(data["high"]),
                        float(data["low"]),
                        float(data["close"]),
                        float(data["volume"]),
                    ),
                )
                conn.commit()

            logger.info(f"üíæ –û–±–Ω–æ–≤–ª–µ–Ω–∞ —Å–≤–µ—á–∞ {symbol} {interval} @ {timestamp}")

        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–≤–µ—á–∏: {e}")
