"""
indicator_trigger.py

–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ç—Ä–∏–≥–≥–µ—Ä –¥–ª—è –ø–µ—Ä–µ—Å—á—ë—Ç–∞ EMA –ø–æ –Ω–æ–≤–æ–π —Å–≤–µ—á–µ.
–ü—Ä–æ—Å—Ç–æ –≤—ã–∑—ã–≤–∞–µ—Ç calc_ema() –Ω–∞ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–º timestamp.
"""

import logging
import sqlite3

from backend.core.indicators.calc_ema import (
    calc_ema,
    EMA_PERIODS,
    DB_PATH,
)

logger = logging.getLogger(__name__)


class IndicatorTrigger:
    def __init__(self):
        self.ema_periods = EMA_PERIODS
        logger.info(
            f"üöÄ IndicatorTrigger –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: EMA –ø–µ—Ä–∏–æ–¥—ã = {self.ema_periods}"
        )

    def trigger_candle(self, candle: dict):
        """
        –ü–µ—Ä–µ—Å—á—ë—Ç EMA –¥–ª—è –æ–¥–Ω–æ–π —Å–≤–µ—á–∏.

        Args:
            candle: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ —Å–≤–µ—á–∏ (symbol, interval, start)
        """
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–ª–æ–≤–∞—Ä—è —Å–≤–µ—á–∏
        symbol = candle["symbol"]
        timeframe = candle["interval"]
        ts = candle["start"] // 1000  # –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å ms ‚Üí s

        logger.info(f"üöÄ –ü–µ—Ä–µ—Å—á—ë—Ç EMA –¥–ª—è {symbol} {timeframe} @ {ts}")
        try:
            with sqlite3.connect(str(DB_PATH)) as conn:
                updated = calc_ema(symbol, timeframe, self.ema_periods, ts, ts, conn)
                if updated > 0:
                    logger.info(f"‚úÖ EMA –æ–±–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è {symbol} {timeframe} @ {ts}")
                else:
                    logger.info(f"‚ÑπÔ∏è EMA —É–∂–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ –¥–ª—è {symbol} {timeframe} @ {ts}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—á—ë—Ç–∞ EMA {symbol} {timeframe} @ {ts}: {e}")
            logger.exception("–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:")
