"""
ws_client.py

–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket Bybit –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ real-time —Å–≤–µ—á–µ–π.
–§–∏–ª—å—Ç—Ä—É–µ—Ç —Ç–æ–ª—å–∫–æ –∑–∞–∫—Ä—ã—Ç—ã–µ —Å–≤–µ—á–∏ (confirm: true) –∏ –≤—ã–∑—ã–≤–∞–µ—Ç callback.
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∫–∞–∫ –æ–¥–∏–Ω–æ—á–Ω—ã–µ —Å–≤–µ—á–∏ (data: {}) —Ç–∞–∫ –∏ –º–∞—Å—Å–∏–≤—ã (data: []) ‚Äî –Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–∏ snapshot.
"""

from typing import Callable, List
from pybit.unified_trading import WebSocket
import time
import logging

logger = logging.getLogger(__name__)


def normalize_interval(raw_interval: str) -> str:
    """
    –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç WebSocket-—Ç–∞–π–º—Ñ—Ä–µ–π–º Bybit –≤ –∫–ª—é—á –∏–∑ TIMEFRAMES_CONFIG.
    –ü—Ä–∏–º–µ—Ä—ã:
        "1"   -> "1m"
        "5"   -> "5m"
        "60"  -> "1h"
        "240" -> "4h"
        "360" -> "6h"
        "720" -> "12h"
        "D"   -> "1d"
        "W"   -> "1w"
    """
    mapping = {
        "1": "1m",
        "5": "5m",
        "30": "30m",
        "60": "1h",
        "240": "4h",
        "360": "6h",
        "720": "12h",
        "D": "1d",
        "W": "1w",
    }
    return mapping.get(str(raw_interval), str(raw_interval))


class WSClient:
    def __init__(
        self,
        symbols: List[str],
        intervals: List[str],
        callback: Callable[[dict], None],
        testnet: bool = False,
    ):
        self.symbols = symbols
        self.intervals = intervals
        self.callback = callback
        self.testnet = testnet
        self.ws = None

    def connect(self):
        logger.info("‚è≥ –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ WebSocket Bybit...")
        self.ws = WebSocket(
            testnet=self.testnet,
            channel_type="linear",  # –¥–ª—è —Ñ—å—é—á–µ—Ä—Å–æ–≤
        )

        for symbol in self.symbols:
            for interval in self.intervals:
                logger.info(f"üì° –ü–æ–¥–ø–∏—Å–∫–∞: kline.{interval}.{symbol}")
                self.ws.kline_stream(
                    symbol=symbol,
                    interval=interval,
                    callback=self._on_message,
                )

    def _on_message(self, message: dict):
        logger.debug(f"\ud83d\udcec –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç WS: {message}")
        try:
            topic = message.get("topic", "")
            data = message.get("data")

            # –ü–∞—Ä—Å–∏–º interval –∏ symbol –∏–∑ topic (–Ω–∞–ø—Ä–∏–º–µ—Ä, kline.1.BTCUSDT)
            interval = symbol = None
            if topic.startswith("kline."):
                parts = topic.split(".")
                if len(parts) == 3:
                    _, raw_interval, symbol = parts
                    interval = normalize_interval(raw_interval)

            if not data:
                return

            if isinstance(data, list):
                for candle in data:
                    if interval is not None:
                        candle["interval"] = interval
                    if symbol is not None:
                        candle["symbol"] = symbol
                    if candle.get("confirm"):
                        logger.debug(f"‚úÖ [list] –ó–∞–∫—Ä—ã—Ç–∞—è —Å–≤–µ—á–∞: {topic}")
                        self.callback(candle)
                        print("üü¢ –ü–æ–ª—É—á–µ–Ω–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ —Å–≤–µ—á–∞.")
            elif isinstance(data, dict):
                if interval is not None:
                    data["interval"] = interval
                if symbol is not None:
                    data["symbol"] = symbol
                if data.get("confirm"):
                    logger.debug(f"‚úÖ [dict] –ó–∞–∫—Ä—ã—Ç–∞—è —Å–≤–µ—á–∞: {topic}")
                    self.callback(data)
                    print("üü¢ –ü–æ–ª—É—á–µ–Ω–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ —Å–≤–µ—á–∞.")

        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    def run_forever(self):
        self.connect()
        try:
            while True:
                time.sleep(1)
        except KeyboardInterrupt:
            logger.info("‚èπ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
