"""
–†–∞—Å—á—ë—Ç EMA —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π –¥–∞–Ω–Ω—ã—Ö

–£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Ä–∞—Å—á—ë—Ç–∞ EMA, –∫–æ—Ç–æ—Ä–∞—è –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –º–æ–¥—É–ª—å –≤–∞–ª–∏–¥–∞—Ü–∏–∏
–¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ —Ä–∞—Å—á—ë—Ç–æ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤.
"""

import os
import sqlite3
import pandas as pd
import pandas_ta as ta
from pathlib import Path
from typing import List

from backend.config.timeframes_config import TIMEFRAMES_CONFIG
from backend.core.validation.data_integrity import validate_for_indicator


PROJECT_ROOT = Path(__file__).resolve().parents[3]
EMA_FILE = PROJECT_ROOT / "backend" / "config" / "ema_periods.txt"
DB_PATH = PROJECT_ROOT / "db" / "market_data.sqlite"


# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–∏–æ–¥—ã –∏–∑ —Ñ–∞–π–ª–∞
with EMA_FILE.open("r") as f:
    EMA_PERIODS = [int(line.strip()) for line in f if line.strip().isdigit()]
if not EMA_PERIODS:
    raise ValueError("–°–ø–∏—Å–æ–∫ EMA-–ø–µ—Ä–∏–æ–¥–æ–≤ –ø—É—Å—Ç")


def calculate_ema(df: pd.DataFrame, periods: List[int], tf_sec: int) -> pd.DataFrame:
    """–†–∞—Å—á—ë—Ç EMA –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –ø–µ—Ä–∏–æ–¥–æ–≤ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π"""
    for period in periods:
        col = f"ema{period}"
        if col not in df.columns:
            continue

        df_null = df[df[col].isnull()].copy()
        if df_null.empty:
            continue

        # –£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ—Å—Ç–∏
        is_valid, reason = validate_for_indicator(df_null, period, tf_sec)
        if not is_valid:
            print(f"‚ö† EMA{period}: {reason} ‚Äî –ø–∏—à–µ–º -1")
            df.loc[df_null.index, col] = -1
            continue

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º EMA —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–∞–ª–∏–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        ema_series = ta.ema(df_null["close"], length=period)
        if ema_series.dropna().shape[0] < period:
            print(f"‚ö† EMA{period}: –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–∞—è EMA ‚Äî –ø–∏—à–µ–º -1")
            df.loc[df_null.index, col] = -1
        else:
            df.loc[df_null.index, col] = ema_series
    return df


def validate_data_before_ema(df: pd.DataFrame, timeframe: str) -> bool:
    """
    –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ —Ä–∞—Å—á—ë—Ç–æ–º EMA

    Args:
        df: DataFrame —Å –¥–∞–Ω–Ω—ã–º–∏ —Å–≤–µ—á–µ–π
        timeframe: –¢–∞–π–º—Ñ—Ä–µ–π–º

    Returns:
        True –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –≤–∞–ª–∏–¥–Ω—ã, False –∏–Ω–∞—á–µ
    """
    if df.empty:
        print(f"   ‚ùå DataFrame –ø—É—Å—Ç")
        return False

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
    required_columns = ["timestamp", "open", "high", "low", "close", "volume"]
    missing_columns = [col for col in required_columns if col not in df.columns]
    if missing_columns:
        print(f"   ‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–æ–ª–æ–Ω–∫–∏: {missing_columns}")
        return False

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö –¥–ª—è EMA
    max_period = max(EMA_PERIODS)
    if len(df) < max_period:
        print(f"   ‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö: {len(df)} < {max_period}")
        return False

    print(f"   ‚úÖ –î–∞–Ω–Ω—ã–µ –ø—Ä–æ—à–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—é ({len(df)} —Ç–æ—á–µ–∫)")
    return True


def run_ema_incremental(symbol: str, timeframe: str):
    """
    –†–∞—Å—á—ë—Ç EMA —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π –¥–∞–Ω–Ω—ã—Ö

    Args:
        symbol: –¢–æ—Ä–≥–æ–≤—ã–π —Å–∏–º–≤–æ–ª
        timeframe: –¢–∞–π–º—Ñ—Ä–µ–π–º
    """
    table = f"candles_{timeframe}"

    with sqlite3.connect(str(DB_PATH)) as conn:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        df = pd.read_sql_query(
            f"SELECT * FROM {table} WHERE symbol = ?", conn, params=(symbol,)
        )

        if df.empty:
            print(f"   ‚ö† –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol} {timeframe}")
            return

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ timestamp
        df.sort_values("timestamp", inplace=True)

        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
        if not validate_data_before_ema(df, timeframe):
            print(f"   ‚è≠ –ü—Ä–æ–ø—É—Å–∫ {symbol} {timeframe} –∏–∑-–∑–∞ –ø—Ä–æ–±–ª–µ–º —Å –¥–∞–Ω–Ω—ã–º–∏")
            return

        # –§–∏–ª—å—Ç—Ä—É–µ–º —Å—Ç—Ä–æ–∫–∏ –±–µ–∑ EMA
        ema_null_mask = pd.Series(False, index=df.index)
        for period in EMA_PERIODS:
            col = f"ema{period}"
            if col in df.columns:
                ema_null_mask |= df[col].isnull()

        df_to_update = df[ema_null_mask]

        if df_to_update.empty:
            print(f"   ‚è≠ EMA —É–∂–µ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω—ã: {symbol} {timeframe}")
            return

        # –†–∞—Å—á—ë—Ç EMA —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
        tf_sec = TIMEFRAMES_CONFIG[timeframe]["interval_sec"]
        df_to_update = calculate_ema(df_to_update, EMA_PERIODS, tf_sec)

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ –ë–î
        update_cols = [
            f"ema{p}" for p in EMA_PERIODS if f"ema{p}" in df_to_update.columns
        ]

        if update_cols:
            with conn:
                for _, row in df_to_update.iterrows():
                    values = [row[c] for c in update_cols]
                    set_clause = ", ".join([f"{col} = ?" for col in update_cols])
                    conn.execute(
                        f"UPDATE {table} SET {set_clause} WHERE symbol = ? AND timestamp = ?",
                        values + [symbol, row["timestamp"]],
                    )

            print(
                f"   ‚úÖ EMA –æ–±–Ω–æ–≤–ª–µ–Ω—ã: {symbol} {timeframe} ({len(df_to_update)} —Å—Ç—Ä–æ–∫)"
            )


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    import argparse

    parser = argparse.ArgumentParser(description="–†–∞—Å—á—ë—Ç EMA —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π –¥–∞–Ω–Ω—ã—Ö")
    parser.add_argument("--symbol", default="BTCUSDT", help="–°–∏–º–≤–æ–ª –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
    parser.add_argument("--timeframe", help="–ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ç–∞–π–º—Ñ—Ä–µ–π–º")

    args = parser.parse_args()

    if args.timeframe:
        timeframes = [args.timeframe]
    else:
        timeframes = list(TIMEFRAMES_CONFIG.keys())

    print(f"üöÄ –ó–∞–ø—É—Å–∫ —Ä–∞—Å—á—ë—Ç–∞ EMA —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π –¥–ª—è {args.symbol}")
    print("=" * 60)

    for tf in timeframes:
        table = f"candles_{tf}"
        print(f"\n‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞ {table}...")
        run_ema_incremental(symbol=args.symbol, timeframe=tf)

    print("\n‚úÖ –†–∞—Å—á—ë—Ç EMA –∑–∞–≤–µ—Ä—à—ë–Ω.")


if __name__ == "__main__":
    main()
