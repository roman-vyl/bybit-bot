"""
calculate_ema.py

–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç EMA –ø–æ –≤—Å–µ–º —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö,
–∏—Å–ø–æ–ª—å–∑—É—è –ø–µ—Ä–∏–æ–¥—ã, —É–∫–∞–∑–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª–µ config/ema_periods.txt

–§–æ—Ä–º–∞—Ç: ema8, ema13, ..., ema233 (–Ω–∏–∂–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä)
–û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ –∑–Ω–∞—á–µ–Ω–∏—è EMA, –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ö–µ–º—ã —Ç–∞–±–ª–∏—Ü
"""

import sys
from pathlib import Path

import sqlite3
import pandas as pd
import pandas_ta as ta
import subprocess
import os


BASE_DIR = Path(__file__).resolve().parents[2]  # backend/
if str(BASE_DIR) not in sys.path:
    sys.path.append(str(BASE_DIR))

PROJECT_ROOT = BASE_DIR.parent  # bybit-bot/
DB_PATH = PROJECT_ROOT / "db" / "market_data.sqlite"
EMA_FILE = BASE_DIR / "config" / "ema_periods.txt"

from config.timeframes_config import TIMEFRAMES_CONFIG

# --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö —Å–≤–µ—á–µ–π ---
check_script = BASE_DIR / "tools" / "check_missing_candles.py"
print(f"\nüõ† –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö —Å–≤–µ—á–µ–π: {check_script}")
subprocess.run(
    ["python", str(check_script)], env={**os.environ, "PYTHONPATH": str(BASE_DIR)}
)

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–∏–æ–¥–æ–≤ ---
if not EMA_FILE.exists():
    raise FileNotFoundError("–§–∞–π–ª config/ema_periods.txt –Ω–µ –Ω–∞–π–¥–µ–Ω")

with EMA_FILE.open("r") as f:
    EMA_PERIODS = [int(line.strip()) for line in f if line.strip().isdigit()]

if not EMA_PERIODS:
    raise ValueError("–°–ø–∏—Å–æ–∫ EMA-–ø–µ—Ä–∏–æ–¥–æ–≤ –ø—É—Å—Ç")

conn = sqlite3.connect(DB_PATH)
cursor = conn.cursor()

for tf in TIMEFRAMES_CONFIG:
    table = f"candles_{tf}"
    print(f"\n‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞ {table}...")
    try:
        df = pd.read_sql_query(f"SELECT * FROM {table}", conn)
    except Exception as e:
        print(f"   ‚ö† –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã {table}: {e}")
        continue

    if len(df) < max(EMA_PERIODS):
        print("   ‚ö† –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö, –ø—Ä–æ–ø—É—Å–∫")
        continue

    df.sort_values("timestamp", inplace=True)

    for period in EMA_PERIODS:
        col_name = f"ema{period}"
        if col_name in df.columns:
            df[col_name] = ta.ema(df["close"], length=period)
        else:
            print(f"   ‚ö† –°—Ç–æ–ª–±–µ—Ü {col_name} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ {table}, –ø—Ä–æ–ø—É—â–µ–Ω")

    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ EMA-—Å—Ç–æ–ª–±—Ü—ã –ø–æ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ
    update_cols = [f"ema{p}" for p in EMA_PERIODS if f"ema{p}" in df.columns]
    for _, row in df.iterrows():
        values = [row[c] for c in update_cols]
        set_clause = ", ".join([f"{col} = ?" for col in update_cols])
        cursor.execute(
            f"UPDATE {table} SET {set_clause} WHERE timestamp = ?",
            values + [row["timestamp"]],
        )

    conn.commit()
    print(f"   ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω—ã –∑–Ω–∞—á–µ–Ω–∏—è EMA: {update_cols}")

conn.close()
print("\n‚úÖ –í—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è EMA –æ–±–Ω–æ–≤–ª–µ–Ω—ã (—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ë–î –Ω–µ –∏–∑–º–µ–Ω–µ–Ω–∞).")
