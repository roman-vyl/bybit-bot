import sys
import sqlite3
import os
from pathlib import Path
import time
from pybit.unified_trading import HTTP
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

sys.path.append(str(Path(__file__).resolve().parents[2]))
BASE_DIR = Path(__file__).resolve().parents[2]  # backend/
if str(BASE_DIR) not in sys.path:
    sys.path.append(str(BASE_DIR))
from config.timeframes_config import TIMEFRAMES_CONFIG

PROJECT_ROOT = BASE_DIR.parent  # bybit-bot/

# –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ .env
SYMBOL = os.getenv("SYMBOL", "BTCUSDT")  # Fallback –Ω–∞ BTCUSDT –µ—Å–ª–∏ –Ω–µ –∑–∞–¥–∞–Ω–æ
DB_PATH = os.getenv("DB_PATH", str(PROJECT_ROOT / "db" / "market_data.sqlite"))

INTERVAL_MAP = {
    "1m": "1",
    "5m": "5",
    "30m": "30",
    "1h": "60",
    "4h": "240",
    "6h": "360",
    "12h": "720",
    "1d": "D",
    "1w": "W",
}

session = HTTP(testnet=False)  # realnet


def get_earliest_db_timestamp(tf):
    """–ü–æ–ª—É—á–∏—Ç—å —Å–∞–º—É—é —Ä–∞–Ω–Ω—é—é –º–µ—Ç–∫—É –≤—Ä–µ–º–µ–Ω–∏ –∏–∑ –ë–î –¥–ª—è —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞"""
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    table = f"candles_{tf}"
    try:
        cursor.execute(
            f"SELECT MIN(timestamp) FROM {table} WHERE symbol = ?", (SYMBOL,)
        )
        result = cursor.fetchone()
        return result[0] if result and result[0] else None
    except sqlite3.OperationalError:
        # –¢–∞–±–ª–∏—Ü–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        return None
    finally:
        conn.close()


def get_earliest_bybit_timestamp(tf):
    """–ü–æ–ª—É—á–∏—Ç—å —Å–∞–º—É—é —Ä–∞–Ω–Ω—é—é –¥–æ—Å—Ç—É–ø–Ω—É—é —Å–≤–µ—á—É –Ω–∞ Bybit –¥–ª—è —Å–∏–º–≤–æ–ª–∞ –∏ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞"""
    interval = INTERVAL_MAP[tf]
    try:
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–∞–º—ã–µ —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ (limit=1, –±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏)
        response = session.get_kline(
            category="linear",
            symbol=SYMBOL,
            interval=interval,
            limit=1000,  # –ë–µ—Ä–µ–º –±–æ–ª—å—à–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–∞–º—ã—Ö —Ä–∞–Ω–Ω–∏—Ö –¥–∞–Ω–Ω—ã—Ö
        )
        candles = response["result"].get("list", [])
        if candles:
            # Bybit –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –ø–æ—Ä—è–¥–∫–µ —É–±—ã–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏, –±–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é (—Å–∞–º—É—é —Ä–∞–Ω–Ω—é—é)
            earliest_candle = candles[-1]
            return int(earliest_candle[0]) // 1000  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º ms –≤ seconds
        return None
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞–Ω–Ω–∏—Ö –¥–∞–Ω–Ω—ã—Ö —Å Bybit: {e}")
        return None


def find_missing_timestamps(tf):
    """–ù–∞–π—Ç–∏ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏ –≤ –ë–î"""
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    table = f"candles_{tf}"
    try:
        cursor.execute(f"SELECT timestamp FROM {table} WHERE symbol = ?", (SYMBOL,))
        rows = cursor.fetchall()
    except sqlite3.OperationalError:
        # –¢–∞–±–ª–∏—Ü–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        return []
    finally:
        conn.close()

    if not rows:
        return []

    timestamps = sorted({row[0] for row in rows})
    interval = TIMEFRAMES_CONFIG[tf]["interval_sec"]
    expected = set(range(min(timestamps), max(timestamps) + interval, interval))
    missing = sorted(expected - set(timestamps))
    return missing


def get_missing_gaps(tf):
    """–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ —É—á–∞—Å—Ç–∫–∏ –≤ –Ω–∞—á–∞–ª–µ –∏ –≤–Ω—É—Ç—Ä–∏ –¥–∞–Ω–Ω—ã—Ö"""
    # –ü–æ–ª—É—á–∞–µ–º —Å–∞–º—É—é —Ä–∞–Ω–Ω—é—é –º–µ—Ç–∫—É –≤ –ë–î
    earliest_db = get_earliest_db_timestamp(tf)
    if not earliest_db:
        print(f"üìù –¢–∞–±–ª–∏—Ü–∞ {tf} –ø—É—Å—Ç–∞ –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª—É—á–∞—è –ø—É—Å—Ç–æ–π —Ç–∞–±–ª–∏—Ü—ã
        earliest_bybit = get_earliest_bybit_timestamp(tf)
        if not earliest_bybit:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–∞–Ω–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ —Å Bybit –¥–ª—è {tf}")
            return []

        now = int(time.time())
        print(f"üîÑ –ü—É—Å—Ç–∞—è —Ç–∞–±–ª–∏—Ü–∞ - –∑–∞–≥—Ä—É–∂–∞–µ–º –≤–µ—Å—å –¥–∏–∞–ø–∞–∑–æ–Ω: {earliest_bybit} ‚Üí {now}")
        return [(earliest_bybit, now)]

    # –ü–æ–ª—É—á–∞–µ–º —Å–∞–º—É—é —Ä–∞–Ω–Ω—é—é –¥–æ—Å—Ç—É–ø–Ω—É—é –º–µ—Ç–∫—É –Ω–∞ Bybit
    earliest_bybit = get_earliest_bybit_timestamp(tf)
    if not earliest_bybit:
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–∞–Ω–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ —Å Bybit –¥–ª—è {tf}")
        return []

    print(f"üìä {tf}: Bybit earliest={earliest_bybit}, DB earliest={earliest_db}")

    gaps = []
    interval = TIMEFRAMES_CONFIG[tf]["interval_sec"]

    # –ü—Ä–æ–ø—É—Å–∫ –≤ –Ω–∞—á–∞–ª–µ (–¥–æ —Å–∞–º—ã—Ö —Ä–∞–Ω–Ω–∏—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –ë–î)
    if earliest_bybit < earliest_db:
        gap_start = earliest_bybit
        gap_end = earliest_db - interval
        if gap_start <= gap_end:
            gaps.append((gap_start, gap_end))
            print(f"üîç –ù–∞–π–¥–µ–Ω –ø—Ä–æ–ø—É—Å–∫ –≤ –Ω–∞—á–∞–ª–µ: {gap_start} ‚Üí {gap_end}")

    # –ü—Ä–æ–ø—É—Å–∫–∏ –≤–Ω—É—Ç—Ä–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
    missing = find_missing_timestamps(tf)
    if missing:
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–ø—É—Å–∫–∏ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω—ã
        current_start = missing[0]
        current_end = missing[0]

        for ts in missing[1:]:
            if ts == current_end + interval:
                current_end = ts
            else:
                gaps.append((current_start, current_end))
                current_start = ts
                current_end = ts
        gaps.append((current_start, current_end))

        print(f"üîç –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–ø—É—Å–∫–æ–≤ –≤–Ω—É—Ç—Ä–∏ –¥–∞–Ω–Ω—ã—Ö: {len(missing)}")

    return gaps


def insert_candles_bulk(tf, candles):
    """–ú–∞—Å—Å–æ–≤–∞—è –≤—Å—Ç–∞–≤–∫–∞ —Å–≤–µ—á–µ–π –≤ –ë–î"""
    if not candles:
        return

    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    table = f"candles_{tf}"

    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    cursor.execute(
        f"""
        CREATE TABLE IF NOT EXISTS {table} (
            symbol TEXT NOT NULL,
            timestamp INTEGER PRIMARY KEY,
            timestamp_ns INTEGER NOT NULL,
            timestamp_ms INTEGER NOT NULL,
            open REAL,
            high REAL,
            low REAL,
            close REAL,
            volume REAL
        )
    """
    )

    data = []
    for c in candles:
        timestamp_ms = c["timestamp"] * 1000
        timestamp_ns = c["timestamp"] * 1_000_000_000
        timestamp = timestamp_ms // 1000
        data.append(
            (
                SYMBOL,
                timestamp,
                timestamp_ns,
                timestamp_ms,
                c["open"],
                c["high"],
                c["low"],
                c["close"],
                c["volume"],
            )
        )
    cursor.executemany(
        f"""
        INSERT OR IGNORE INTO {table}
        (symbol, timestamp, timestamp_ns, timestamp_ms, open, high, low, close, volume)
        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
        """,
        data,
    )
    conn.commit()
    conn.close()


def fetch_candles_batch(tf, start_ts, end_ts):
    """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–≤–µ—á–µ–π —Å Bybit –±–∞—Ç—á–∞–º–∏"""
    interval = INTERVAL_MAP[tf]
    all_candles = []
    current = start_ts
    step = TIMEFRAMES_CONFIG[tf]["interval_sec"] * 200

    while current <= end_ts:
        try:
            response = session.get_kline(
                category="linear",
                symbol=SYMBOL,
                interval=interval,
                start=current * 1000,
                end=min(end_ts, current + step) * 1000,
                limit=200,
            )
            candles = response["result"].get("list", [])
            parsed = [
                {
                    "timestamp": int(c[0]) // 1000,
                    "open": float(c[1]),
                    "high": float(c[2]),
                    "low": float(c[3]),
                    "close": float(c[4]),
                    "volume": float(c[5]),
                }
                for c in candles
            ]
            all_candles.extend(parsed)
            print(
                f"üì• –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(parsed)} —Å–≤–µ—á–µ–π @ {tf} ({current} ‚Üí {min(end_ts, current + step)})"
            )
        except Exception as e:
            print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ API: {e}")
        current += step
        time.sleep(0.05)

    return all_candles


def main():
    print(f"üéØ –°–∏–º–≤–æ–ª: {SYMBOL}")
    print(f"üíæ –ë–î: {DB_PATH}")

    for tf in TIMEFRAMES_CONFIG:
        print(f"\nüì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –¥–æ–∑–∞–≥—Ä—É–∑–∫–∞ {tf}...")

        gaps = get_missing_gaps(tf)
        if not gaps:
            print(f"‚úÖ –ü—Ä–æ–ø—É—Å–∫–æ–≤ –Ω–µ—Ç –≤ {tf}")
            continue

        total_loaded = 0
        for gap_start, gap_end in gaps:
            print(f"üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–ø—É—Å–∫–∞: {gap_start} ‚Üí {gap_end}")

            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à–æ–π –±—É—Ñ–µ—Ä –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
            interval = TIMEFRAMES_CONFIG[tf]["interval_sec"]
            margin = interval * 10
            from_ts = gap_start - margin
            to_ts = gap_end + margin

            candles = fetch_candles_batch(tf, from_ts, to_ts)
            if candles:
                insert_candles_bulk(tf, candles)
                total_loaded += len(candles)

        print(f"‚úÖ –í—Å–µ–≥–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ {total_loaded} —Å–≤–µ—á–µ–π –≤ {tf}")


if __name__ == "__main__":
    main()
