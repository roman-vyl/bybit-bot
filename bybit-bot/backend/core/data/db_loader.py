import sqlite3
import pandas as pd
import orjson
from typing import List
from datetime import datetime, timezone
from backend.config.timeframes_config import TIMEFRAMES_CONFIG


def get_unix_timestamp(dt_str: str) -> int:
    """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç ISO-—Å—Ç—Ä–æ–∫—É –≤ UNIX timestamp (UTC)."""
    if dt_str.endswith("Z"):
        dt_str = dt_str[:-1]
    dt = datetime.fromisoformat(dt_str).replace(tzinfo=timezone.utc)
    return int(dt.timestamp())


def fill_missing_candles(df: pd.DataFrame, timeframe: str) -> pd.DataFrame:
    df = df.drop_duplicates(subset="timestamp", keep="last")
    if df.empty or "timestamp" not in df.columns:
        return df

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ datetime (UTC)
    df["timestamp"] = pd.to_datetime(df["timestamp"], unit="s", utc=True)

    interval_sec = TIMEFRAMES_CONFIG[timeframe]["interval_sec"]
    start = df["timestamp"].min()
    end = df["timestamp"].max()

    # –°—Ç—Ä–æ–∏–º –ø–æ–ª–Ω—É—é –≤—Ä–µ–º–µ–Ω–Ω—É—é –æ—Å—å
    full_range = pd.date_range(start=start, end=end, freq=f"{interval_sec}s")

    df = df.set_index("timestamp")
    df = df[~df.index.duplicated(keep="last")]
    df_full = df.reindex(full_range)

    df_full.index.name = "timestamp"
    df_full = df_full.reset_index()

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ int timestamp
    df_full["timestamp"] = df_full["timestamp"].apply(lambda dt: int(dt.timestamp()))

    return df_full


def get_candles_from_db(
    symbol: str, timeframe: str, start: str, end: str
) -> List[dict]:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–≤–µ—á–∏ –∏–∑ SQLite –ø–æ —Å–∏–º–≤–æ–ª—É, —Ç–∞–π–º—Ñ—Ä–µ–π–º—É –∏ –¥–∏–∞–ø–∞–∑–æ–Ω—É –≤—Ä–µ–º–µ–Ω–∏."""
    db_path = "db/market_data.sqlite"
    table = f"candles_{timeframe}"

    start_ts = get_unix_timestamp(start)
    end_ts = get_unix_timestamp(end)
    print(f"[DEBUG] get_candles_from_db: raw start={start}, end={end}")
    print(f"[DEBUG] get_candles_from_db: parsed start_ts={start_ts}, end_ts={end_ts}")

    query = f"""
        SELECT * FROM {table}
        WHERE symbol = ?
        AND timestamp BETWEEN ? AND ?
        ORDER BY timestamp ASC
    """

    with sqlite3.connect(db_path) as conn:
        df = pd.read_sql(query, conn, params=(symbol, start_ts, end_ts))
        print("[DEBUG] SQL df shape:", df.shape)
        print("[DEBUG] SQL df head:\n", df.head(3))

        df = fill_missing_candles(df, timeframe)
        # –£–¥–∞–ª—è–µ–º —Å–≤–µ—á–∏ –±–µ–∑ –≤—Å–µ—Ö OHLC –∑–Ω–∞—á–µ–Ω–∏–π (—ç—Ç–æ "–≤—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ" –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏)
        ohlc_cols = ["open", "high", "low", "close"]
        before = df.shape[0]
        df = df[df[ohlc_cols].notna().all(axis=1)]
        after = df.shape[0]
        print(f"[DEBUG] –£–¥–∞–ª–µ–Ω–æ –ø—É—Å—Ç—ã—Ö —Å–≤–µ—á–µ–π: {before - after}, –æ—Å—Ç–∞–ª–æ—Å—å: {after}")

        print("[DEBUG] –ü–æ—Å–ª–µ fill_missing_candles:", df.shape)
        print("[DEBUG] –ü—Ä–∏–º–µ—Ä –ø–æ—Å–ª–µ fill:\n", df.head(3))

    # —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è: —Ç–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫–∏ —Å –ø–æ–ª–Ω—ã–º OHLC
    df = df[
        df["open"].notna()
        & df["high"].notna()
        & df["low"].notna()
        & df["close"].notna()
    ]
    print("[DEBUG] –ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ OHLC:", df.shape)

    # ‚è± timestamp ‚Üí ISO 8601
    if "timestamp" in df.columns:
        df["timestamp"] = df["timestamp"].apply(
            lambda ts: datetime.utcfromtimestamp(int(ts)).isoformat()
        )

    df.replace([float("inf"), float("-inf")], None, inplace=True)
    df = df.where(pd.notna(df), None)
    # üîç –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å —Å—Ç—Ä–æ–∫–∏ –±–µ–∑ OHLC
    ohlc_cols = ["open", "high", "low", "close"]
    df = df[df[ohlc_cols].notna().all(axis=1)]
    print(f"[DEBUG] –ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ OHLC: {df.shape}")

    return orjson.loads(orjson.dumps(df.to_dict(orient="records")))
