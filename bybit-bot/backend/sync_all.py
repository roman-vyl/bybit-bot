import subprocess
import sys
import os
from pathlib import Path
import hashlib

BASE_DIR = Path(__file__).resolve().parent
PYTHON = sys.executable


def run(label, path):
    print(f"\nüîß {label}")
    env = os.environ.copy()
    env["PYTHONPATH"] = str(BASE_DIR.parent)
    result = subprocess.run([PYTHON, str(path)], env=env)
    if result.returncode != 0:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ {path}")
        sys.exit(result.returncode)


def hash_configs():
    files = [
        BASE_DIR / "config" / "ema_periods.txt",
        BASE_DIR / "config" / "timeframes_config.py",
    ]
    hasher = hashlib.sha256()
    for file in files:
        if file.exists():
            with open(file, "rb") as f:
                hasher.update(f.read())
    return hasher.hexdigest()


def main():
    print("üöÄ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤")
    config_hash_file = BASE_DIR / "config" / ".sync_hash"

    current_hash = hash_configs()
    previous_hash = (
        config_hash_file.read_text().strip() if config_hash_file.exists() else ""
    )

    # –®–∞–≥ 1. –ó–∞–≥—Ä—É–∑–∫–∞ —Å–≤–µ–∂–∏—Ö –¥–∞–Ω–Ω—ã—Ö
    run("–®–∞–≥ 1: –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–≤–µ—á–µ–π", BASE_DIR / "core/data/data_backfill.py")

    # –®–∞–≥ 2. –î–æ–∑–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö
    run(
        "–®–∞–≥ 2: –ü–æ–∏—Å–∫ –∏ –∑–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö —Å–≤–µ—á–µ–π",
        BASE_DIR / "core/data/data_extended_backfill.py",
    )

    # –®–∞–≥ 3. –ü–µ—Ä–µ—Å—á—ë—Ç EMA
    if current_hash != previous_hash:
        print("üîÅ –ö–æ–Ω—Ñ–∏–≥–∏ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å ‚Äî –≤—ã–ø–æ–ª–Ω—è–µ–º –ü–û–õ–ù–´–ô –ø–µ—Ä–µ—Å—á—ë—Ç EMA")
        run(
            "–®–∞–≥ 3: –ü–æ–ª–Ω—ã–π –ø–µ—Ä–µ—Å—á—ë—Ç EMA",
            BASE_DIR / "core/indicators/calculate_ema_combined.py",
        )
        config_hash_file.write_text(current_hash)
    else:
        run(
            "–®–∞–≥ 3: –ò–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π –ø–µ—Ä–µ—Å—á—ë—Ç EMA",
            BASE_DIR / "core/indicators/calculate_ema_combined.py",
        )

    # –®–∞–≥ 4. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü
    run("–®–∞–≥ 4: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å—Ö–µ–º—ã —Ç–∞–±–ª–∏—Ü", BASE_DIR / "tools/update_db_structure.py")

    # –®–∞–≥ 5. –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö —Å–≤–µ—á–µ–π
    run(
        "–®–∞–≥ 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–ø—É—Å–∫–æ–≤ –≤ –¥–∞–Ω–Ω—ã—Ö",
        BASE_DIR / "tools/check_missing_candles.py",
    )

    print("\n‚úÖ –ü–æ–ª–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

    # –®–∞–≥ 6. –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–ª–æ—Ö–∏—Ö timestamp
    run(
        "–®–∞–≥ 6: –û—á–∏—Å—Ç–∫–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö timestamp",
        BASE_DIR / "tools/bad_data_filter.py",
    )

    # –®–∞–≥ 7. –£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
    run(
        "–®–∞–≥ 7: –£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –ø–æ timestamp",
        BASE_DIR / "tools/duplicate_cleaner.py",
    )

    # –®–∞–≥ 8. –ó–∞–ø—É—Å–∫ realtime data loader
    run(
        "–®–∞–≥ 8: –ó–∞–ø—É—Å–∫ realtime data loader",
        BASE_DIR / "bybit_realtime_data_loader" / "run_bybit_loader.py",
    )


if __name__ == "__main__":
    main()
