"""
duplicate_cleaner.py

–£–¥–∞–ª—è–µ—Ç –¥—É–±–ª–∏–∫–∞—Ç—ã —Å–≤–µ—á–µ–π –∏–∑ —Ç–∞–±–ª–∏—Ü candles_<tf> –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö,
–æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ —Å–∞–º—É—é ¬´–ø–æ—Å–ª–µ–¥–Ω—é—é¬ª –∑–∞–ø–∏—Å—å –ø–æ –∫–∞–∂–¥–æ–º—É timestamp.
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç MAX(rowid), —á—Ç–æ–±—ã –Ω–µ —É–¥–∞–ª—è—Ç—å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ —Å–≤–µ—á–∏
–∏–∑ data_extended_backfill.py
"""

import sqlite3
from pathlib import Path

BASE_DIR = Path(__file__).resolve().parents[1]  # backend/
PROJECT_ROOT = BASE_DIR.parent  # bybit-bot/
DB_PATH = PROJECT_ROOT / "db" / "market_data.sqlite"


conn = sqlite3.connect(DB_PATH)
cursor = conn.cursor()

cursor.execute(
    "SELECT name FROM sqlite_master WHERE type='table' AND name LIKE 'candles_%'"
)
tables = [row[0] for row in cursor.fetchall()]

for table in tables:
    print(f"\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü—ã: {table}")

    cursor.execute(f"SELECT COUNT(*) FROM {table}")
    total = cursor.fetchone()[0]

    cursor.execute(f"SELECT COUNT(DISTINCT timestamp) FROM {table}")
    unique = cursor.fetchone()[0]

    duplicates = total - unique
    if duplicates <= 0:
        print("   ‚úÖ –î—É–±–ª–∏–∫–∞—Ç–æ–≤ –Ω–µ—Ç")
        continue

    print(f"   ‚ö† –ù–∞–π–¥–µ–Ω–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: {duplicates}")

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º MAX(rowid), —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –≤—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏ (–∏–∑ backfill)
    cursor.execute(
        f"""
        DELETE FROM {table}
        WHERE rowid NOT IN (
            SELECT MAX(rowid) FROM {table} GROUP BY timestamp
        )
    """
    )
    conn.commit()

    print(f"   üßπ –£–¥–∞–ª–µ–Ω–æ: {duplicates} –∑–∞–ø–∏—Å–µ–π")

conn.close()
print("\nüèÅ –û—á–∏—Å—Ç–∫–∞ –¥—É–±–ª–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ.")
