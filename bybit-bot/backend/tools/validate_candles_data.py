"""
–°–∫—Ä–∏–ø—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Å–≤–µ—á–µ–π

–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –º–æ–¥—É–ª—å data_integrity –¥–ª—è –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö
–≤ —Ç–∞–±–ª–∏—Ü–∞—Ö —Å–≤–µ—á–µ–π –≤—Å–µ—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤.
"""

import sys
from pathlib import Path

BASE_DIR = Path(__file__).resolve().parents[1]
if str(BASE_DIR) not in sys.path:
    sys.path.append(str(BASE_DIR))
PROJECT_ROOT = BASE_DIR.parent  # bybit-bot/
DB_PATH = PROJECT_ROOT / "db" / "market_data.sqlite"

import sqlite3
import pandas as pd
from backend.config.timeframes_config import TIMEFRAMES_CONFIG
from backend.core.validation import CandleDataValidator, validate_candle_dataframe


def validate_table_data(
    table_name: str, timeframe: str, symbol: str = "BTCUSDT"
) -> dict:
    """
    –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ

    Args:
        table_name: –ò–º—è —Ç–∞–±–ª–∏—Ü—ã
        timeframe: –¢–∞–π–º—Ñ—Ä–µ–π–º
        symbol: –°–∏–º–≤–æ–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏

    Returns:
        –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    """
    print(f"\nüîç –í–∞–ª–∏–¥–∞—Ü–∏—è {table_name} ({timeframe}) –¥–ª—è {symbol}...")

    try:
        with sqlite3.connect(DB_PATH) as conn:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            query = f"SELECT * FROM {table_name} WHERE symbol = ? ORDER BY timestamp DESC LIMIT 2000"
            df = pd.read_sql_query(query, conn, params=(symbol,))

        if df.empty:
            print(f"   ‚ö† –¢–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞ –∏–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}")
            return {}

        # –°–æ–∑–¥–∞—ë–º –≤–∞–ª–∏–¥–∞—Ç–æ—Ä
        validator = CandleDataValidator(timeframe)

        # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–ø–ª–µ–∫—Å–Ω—É—é –≤–∞–ª–∏–¥–∞—Ü–∏—é
        results = validator.comprehensive_validation(df)

        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—é–º–µ
        summary = validator.get_validation_summary(results)
        print(summary)

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        print(f"   üìÖ –î–∏–∞–ø–∞–∑–æ–Ω: {df['timestamp'].min()} - {df['timestamp'].max()}")
        print(f"   ‚è±Ô∏è  –ò–Ω—Ç–µ—Ä–≤–∞–ª: {TIMEFRAMES_CONFIG[timeframe]['interval_sec']} —Å–µ–∫")

        return results

    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ {table_name}: {e}")
        return {}


def validate_all_timeframes(symbol: str = "BTCUSDT"):
    """
    –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ –≤—Å–µ–º —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞–º

    Args:
        symbol: –°–∏–º–≤–æ–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    """
    print(f"üöÄ –ó–∞–ø—É—Å–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}")
    print("=" * 60)

    all_results = {}

    for timeframe in TIMEFRAMES_CONFIG:
        table_name = f"candles_{timeframe}"
        results = validate_table_data(table_name, timeframe, symbol)
        if results:
            all_results[timeframe] = results

    # –û–±—â–∏–π –æ—Ç—á—ë—Ç
    print("\n" + "=" * 60)
    print("üìä –û–ë–©–ò–ô –û–¢–ß–Å–¢ –í–ê–õ–ò–î–ê–¶–ò–ò")
    print("=" * 60)

    total_tables = len(all_results)
    valid_tables = 0

    for timeframe, results in all_results.items():
        is_valid = (
            results["timestamp_continuity"].is_valid
            and results["ohlc_validity"].is_valid
            and results["data_sufficiency"].is_valid
        )

        status = "‚úÖ" if is_valid else "‚ùå"
        print(f"{status} {timeframe}: {status}")

        if is_valid:
            valid_tables += 1

    print(f"\nüìà –†–µ–∑—É–ª—å—Ç–∞—Ç: {valid_tables}/{total_tables} —Ç–∞–±–ª–∏—Ü –≤–∞–ª–∏–¥–Ω—ã")

    if valid_tables == total_tables:
        print("üéâ –í—Å–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—à–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—é!")
    else:
        print("‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã –≤ –¥–∞–Ω–Ω—ã—Ö")


def validate_specific_timeframe(timeframe: str, symbol: str = "BTCUSDT"):
    """
    –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞

    Args:
        timeframe: –¢–∞–π–º—Ñ—Ä–µ–π–º –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        symbol: –°–∏–º–≤–æ–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    """
    if timeframe not in TIMEFRAMES_CONFIG:
        print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∞–π–º—Ñ—Ä–µ–π–º: {timeframe}")
        print(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ: {list(TIMEFRAMES_CONFIG.keys())}")
        return

    table_name = f"candles_{timeframe}"
    validate_table_data(table_name, timeframe, symbol)


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    import argparse

    parser = argparse.ArgumentParser(description="–í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Å–≤–µ—á–µ–π")
    parser.add_argument("--symbol", default="BTCUSDT", help="–°–∏–º–≤–æ–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏")
    parser.add_argument("--timeframe", help="–ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ç–∞–π–º—Ñ—Ä–µ–π–º –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏")

    args = parser.parse_args()

    if args.timeframe:
        validate_specific_timeframe(args.timeframe, args.symbol)
    else:
        validate_all_timeframes(args.symbol)


if __name__ == "__main__":
    main()
