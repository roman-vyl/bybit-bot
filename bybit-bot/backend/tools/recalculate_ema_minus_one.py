"""
recalculate_ema_minus_one.py

–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–µ—Ä–µ—Å—á–µ—Ç–∞ —Ç–æ–ª—å–∫–æ –∑–Ω–∞—á–µ–Ω–∏–π -1 –≤ EMA –∫–æ–ª–æ–Ω–∫–∞—Ö.
–ù–∞—Ö–æ–¥–∏—Ç –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ —Å emaX = -1 –∏ –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∏—Ö —Å –Ω–æ–≤–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π.
"""

import sqlite3
import pandas as pd
from pathlib import Path
import sys

# –î–æ–±–∞–≤–ª—è–µ–º backend –≤ –ø—É—Ç—å
BASE_DIR = Path(__file__).resolve().parents[1]
if str(BASE_DIR) not in sys.path:
    sys.path.append(str(BASE_DIR))

from config.timeframes_config import TIMEFRAMES_CONFIG
from core.validation.data_integrity import validate_for_indicator

PROJECT_ROOT = BASE_DIR.parent
DB_PATH = PROJECT_ROOT / "db" / "market_data.sqlite"

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–∏–æ–¥—ã EMA
EMA_FILE = BASE_DIR / "config" / "ema_periods.txt"
with EMA_FILE.open("r") as f:
    EMA_PERIODS = [int(line.strip()) for line in f if line.strip().isdigit()]


def find_minus_one_rows(table: str, period: int) -> pd.DataFrame:
    """–ù–∞—Ö–æ–¥–∏—Ç —Å—Ç—Ä–æ–∫–∏ —Å emaX = -1"""
    col = f"ema{period}"

    with sqlite3.connect(DB_PATH) as conn:
        query = f"""
        SELECT * FROM {table} 
        WHERE {col} = -1 
        ORDER BY timestamp
        """
        df = pd.read_sql_query(query, conn)

    return df


def recalculate_ema_for_table(table: str, timeframe: str, symbol: str = "BTCUSDT"):
    """–ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ—Ç EMA = -1 –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã"""
    print(f"\nüîÑ –ü–µ—Ä–µ—Å—á–µ—Ç EMA = -1 –≤ {table} ({timeframe})...")

    tf_sec = TIMEFRAMES_CONFIG[timeframe]["interval_sec"]
    total_recalculated = 0

    for period in EMA_PERIODS:
        col = f"ema{period}"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–æ–ª–æ–Ω–∫–∞
        with sqlite3.connect(DB_PATH) as conn:
            cursor = conn.cursor()
            cursor.execute(f"PRAGMA table_info({table})")
            columns = [row[1] for row in cursor.fetchall()]

            if col not in columns:
                print(f"   ‚è≠ –ö–æ–ª–æ–Ω–∫–∞ {col} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                continue

        # –ù–∞—Ö–æ–¥–∏–º —Å—Ç—Ä–æ–∫–∏ —Å -1
        df_minus_one = find_minus_one_rows(table, period)

        if df_minus_one.empty:
            print(f"   ‚úÖ {col}: –Ω–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–π -1")
            continue

        print(f"   üîç {col}: –Ω–∞–π–¥–µ–Ω–æ {len(df_minus_one)} –∑–Ω–∞—á–µ–Ω–∏–π -1")

        # –î–ª—è –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–∏ —Å -1 –±–µ—Ä–µ–º –æ–∫–Ω–æ –¥–∞–Ω–Ω—ã—Ö –∏ –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º
        recalculated_count = 0

        with sqlite3.connect(DB_PATH) as conn:
            for idx, row in df_minus_one.iterrows():
                timestamp = row["timestamp"]

                # –ë–µ—Ä–µ–º –æ–∫–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ EMA
                window_query = f"""
                SELECT * FROM {table} 
                WHERE symbol = ? 
                AND timestamp <= ? 
                ORDER BY timestamp DESC 
                LIMIT {period * 2}  -- –ë–µ—Ä–µ–º –±–æ–ª—å—à–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
                """

                window_df = pd.read_sql_query(
                    window_query, conn, params=(symbol, timestamp)
                )

                if len(window_df) < period:
                    print(
                        f"      ‚ö† {col} {timestamp}: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö ({len(window_df)} < {period})"
                    )
                    continue

                # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é timestamp
                window_df = window_df.sort_values("timestamp")

                # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
                is_valid, reason = validate_for_indicator(window_df, period, tf_sec)

                if not is_valid:
                    print(f"      ‚ö† {col} {timestamp}: {reason}")
                    continue

                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º EMA
                import pandas_ta as ta

                ema_series = ta.ema(window_df["close"], length=period)

                if pd.isna(ema_series.iloc[-1]):
                    print(f"      ‚ö† {col} {timestamp}: EMA –Ω–µ —Ä–∞—Å—Å—á–∏—Ç–∞–ª–∞—Å—å")
                    continue

                # –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –ë–î
                cursor = conn.cursor()
                cursor.execute(
                    f"UPDATE {table} SET {col} = ? WHERE symbol = ? AND timestamp = ?",
                    (float(ema_series.iloc[-1]), symbol, timestamp),
                )

                recalculated_count += 1
                print(f"      ‚úÖ {col} {timestamp}: {ema_series.iloc[-1]:.2f}")

            conn.commit()

        total_recalculated += recalculated_count
        print(
            f"   üìä {col}: –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω–æ {recalculated_count}/{len(df_minus_one)} –∑–Ω–∞—á–µ–Ω–∏–π"
        )

    print(f"   üéØ –ò—Ç–æ–≥–æ –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω–æ: {total_recalculated} –∑–Ω–∞—á–µ–Ω–∏–π")
    return total_recalculated


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ü–µ—Ä–µ—Å—á–µ—Ç EMA = -1 —Å –Ω–æ–≤–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π")
    print("=" * 50)

    total_recalculated = 0

    for timeframe in TIMEFRAMES_CONFIG:
        table = f"candles_{timeframe}"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–±–ª–∏—Ü–∞
        with sqlite3.connect(DB_PATH) as conn:
            cursor = conn.cursor()
            cursor.execute(
                "SELECT name FROM sqlite_master WHERE type='table' AND name = ?",
                (table,),
            )
            if not cursor.fetchone():
                print(f"‚è≠ –¢–∞–±–ª–∏—Ü–∞ {table} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                continue

        recalculated = recalculate_ema_for_table(table, timeframe)
        total_recalculated += recalculated

    print("\n" + "=" * 50)
    print(f"üèÅ –ü–µ—Ä–µ—Å—á–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω. –í—Å–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {total_recalculated} –∑–Ω–∞—á–µ–Ω–∏–π")


if __name__ == "__main__":
    main()
