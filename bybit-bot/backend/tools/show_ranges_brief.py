#!/usr/bin/env python3
"""
show_ranges_brief.py

–ö—Ä–∞—Ç–∫–∏–π –ø—Ä–æ—Å–º–æ—Ç—Ä –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤ –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü–∞—Ö —Å–≤–µ—á–µ–π
–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –±–µ–∑ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–ø—É—Å–∫–æ–≤
"""

import sys
import sqlite3
from pathlib import Path
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—É—Ç–µ–π
BASE_DIR = Path(__file__).resolve().parents[1]  # backend/
PROJECT_ROOT = BASE_DIR.parent  # bybit-bot/
DB_PATH = PROJECT_ROOT / "db" / "market_data.sqlite"


def main():
    print("üìä –ö–†–ê–¢–ö–ò–ô –û–ë–ó–û–† –î–ê–ù–ù–´–• –í –ë–î")
    print("=" * 50)

    conn = sqlite3.connect(DB_PATH)

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü —Å–≤–µ—á–µ–π
    cursor = conn.cursor()
    cursor.execute(
        """
        SELECT name FROM sqlite_master 
        WHERE type='table' AND name LIKE 'candles_%'
        ORDER BY name
    """
    )
    tables = [row[0] for row in cursor.fetchall()]

    if not tables:
        print("‚ö†Ô∏è –¢–∞–±–ª–∏—Ü—ã —Å–æ —Å–≤–µ—á–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
        conn.close()
        return

    print(f"–ù–∞–π–¥–µ–Ω–æ —Ç–∞–±–ª–∏—Ü: {len(tables)}\n")

    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞–±–ª–∏—Ü—ã
    print(
        f"{'–¢–∞–π–º—Ñ—Ä–µ–π–º':<12} {'–ó–∞–ø–∏—Å–µ–π':<10} {'–ù–∞—á–∞–ª–æ –¥–∞–Ω–Ω—ã—Ö':<20} {'–ö–æ–Ω–µ—Ü –¥–∞–Ω–Ω—ã—Ö':<20} {'–î–Ω–µ–π':<8}"
    )
    print("-" * 80)

    for table in tables:
        tf = table.replace("candles_", "")

        try:
            cursor.execute(
                f"""
                SELECT 
                    COUNT(*) as total,
                    MIN(timestamp) as earliest,
                    MAX(timestamp) as latest
                FROM {table}
                WHERE timestamp > 0
            """
            )

            result = cursor.fetchone()
            total, earliest, latest = result

            if total == 0:
                print(f"{tf:<12} {'0':<10} {'(–ø—É—Å—Ç–æ)':<20} {'(–ø—É—Å—Ç–æ)':<20} {'0':<8}")
                continue

            start_date = datetime.fromtimestamp(earliest).strftime("%Y-%m-%d %H:%M")
            end_date = datetime.fromtimestamp(latest).strftime("%Y-%m-%d %H:%M")
            days = round((latest - earliest) / 86400, 1)

            print(f"{tf:<12} {total:<10,} {start_date:<20} {end_date:<20} {days:<8}")

        except sqlite3.OperationalError as e:
            print(f"{tf:<12} {'ERROR':<10} {str(e)[:40]:<40}")

    conn.close()
    print("\n‚úÖ –ì–æ—Ç–æ–≤–æ")


if __name__ == "__main__":
    main()
