"""
add_ema_columns.py

–û–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç:
- –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Å—Ç–æ–ª–±—Ü—ã emaXX –≤ —Ç–∞–±–ª–∏—Ü—ã –≤–∏–¥–∞ candles_<tf>
- –£–¥–∞–ª—è–µ—Ç —Å—Ç–æ–ª–±—Ü—ã emaXX, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ ema_periods.txt
- –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ—Ç —Å—Ç–æ–ª–±—Ü—ã —Ç–∏–ø–∞ EMAxx -> emaxx –≤ –ë–î (—Ä–µ–≥–∏—Å—Ç—Ä)

–§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: config/ema_periods.txt
"""

import sqlite3
from pathlib import Path

# --- –ü—É—Ç–∏ ---
BASE_DIR = Path(__file__).resolve().parents[1]  # backend/
PROJECT_ROOT = BASE_DIR.parent  # bybit-bot/
DB_PATH = PROJECT_ROOT / "db" / "market_data.sqlite"
EMA_FILE = PROJECT_ROOT / "backend" / "config" / "ema_periods.txt"

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–∏–æ–¥–æ–≤ EMA ---
if not EMA_FILE.exists():
    raise FileNotFoundError("–§–∞–π–ª config/ema_periods.txt –Ω–µ –Ω–∞–π–¥–µ–Ω")

with EMA_FILE.open("r") as f:
    ema_periods = [line.strip() for line in f if line.strip().isdigit()]

if not ema_periods:
    raise ValueError("–°–ø–∏—Å–æ–∫ EMA-–ø–µ—Ä–∏–æ–¥–æ–≤ –ø—É—Å—Ç")

desired_ema_cols = {f"ema{p}" for p in ema_periods}

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü ---
conn = sqlite3.connect(DB_PATH)
cursor = conn.cursor()

cursor.execute(
    "SELECT name FROM sqlite_master WHERE type='table' AND name LIKE 'candles_%'"
)
tables = [row[0] for row in cursor.fetchall()]

for table in tables:
    print(f"\nüîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ {table}...")
    cursor.execute(f"PRAGMA table_info({table})")
    raw_columns = [row[1] for row in cursor.fetchall()]
    columns = [c.lower() for c in raw_columns]  # —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ

    base_columns = ["symbol", "timestamp", "open", "high", "low", "close", "volume"]
    current_ema_cols = [c for c in columns if c.startswith("ema")]

    # --- –†–µ–Ω–µ–π–º: –∑–∞–º–µ–Ω–∏–º EMAxx ‚Üí emaxx ---
    rename_map = {
        old: old.lower()
        for old in raw_columns
        if old.startswith("EMA") and old.lower() in desired_ema_cols
    }
    if rename_map:
        print(f"   üîÅ –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ: {rename_map}")
        for old_col, new_col in rename_map.items():
            cursor.execute(f"ALTER TABLE {table} RENAME COLUMN {old_col} TO {new_col}")
        conn.commit()

    # --- –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ ---
    for col in sorted(desired_ema_cols):
        if col not in columns:
            try:
                cursor.execute(f"ALTER TABLE {table} ADD COLUMN {col} REAL")
                print(f"   ‚ûï –î–æ–±–∞–≤–ª–µ–Ω —Å—Ç–æ–ª–±–µ—Ü {col}")
            except Exception as e:
                print(f"   ‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ {col}: {e}")
        else:
            print(f"   ‚úÖ {col} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

    # --- –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ EMA ---
    cols_to_remove = set(current_ema_cols) - desired_ema_cols
    if cols_to_remove:
        print(f"   üßπ –£–¥–∞–ª—è–µ–º —Å—Ç–æ–ª–±—Ü—ã: {sorted(cols_to_remove)}")

        keep_cols = base_columns + sorted(desired_ema_cols)
        keep_cols_str = ", ".join(keep_cols)

        cursor.execute(
            f"CREATE TABLE temp_{table} AS SELECT {keep_cols_str} FROM {table}"
        )
        cursor.execute(f"DROP TABLE {table}")
        cursor.execute(f"ALTER TABLE temp_{table} RENAME TO {table}")
        conn.commit()

        print(f"   ‚úÖ –õ–∏—à–Ω–∏–µ —Å—Ç–æ–ª–±—Ü—ã —É–¥–∞–ª–µ–Ω—ã")
    else:
        print(f"   üßº –ù–µ—á–µ–≥–æ —É–¥–∞–ª—è—Ç—å")

conn.close()
print("\nüèÅ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ë–î –∑–∞–≤–µ—Ä—à–µ–Ω–æ.")
